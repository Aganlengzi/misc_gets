http://wenku.baidu.com/link?url=1hJIxftMxF1Va5vxffLNcDMUa-Q7DTDW8NArl9TgUyGx2yz2uWWYF0LFYCrF5-E90bcBX2PsDMRWulkaGSdOrEL8tMuwDYU7aaSEbTRckga

覆盖率测试：
白盒单元测试：
1.语句覆盖：程序中的每条可执行语句至少执行一次。
2.判定覆盖/分支覆盖：程序中的每个判定的真假分支至少取一次。
3.条件覆盖：判定中的每个条件的真假值至少取一次。
4.判定条件覆盖：判定中的每个条件的真假值至少取一次并且每个判定本身取真假分支至少一次。
5.路径覆盖：覆盖程序中所有可能执行的路径（应该非常多）。 
6.分支条件组合覆盖：判定中的所有条件的取值组合都遍历一次。
7.Z-路径覆盖：对路径覆盖的变体，简化循环结构意义下的路径覆盖称为Z-路径覆盖。
另外还有：
8.函数覆盖：系统中所有的函数均至少执行一次。
9.指令块覆盖：是语句覆盖的变体，指令块指函数内部的一系列语句，其中不存在控制语句。
10.判定路径覆盖：是判定覆盖的变体，规定了开始和结束位置--函数入口（出口）和判定的开始。
11.更改条件判定覆盖：是判定条件覆盖的变体，通过分析判定的覆盖来增加测试用例，防止测试呈指数上升的趋势。

黑盒测试：
功能测试（需求覆盖，接口覆盖等）

C++ Test能够完成的关于测试的功能：
静态测试：编码规范检查、不运行程序的情况下检查运行时错误
                代码走查规范：Effective C++(epcc)，More Effective C++(mepcc)，meyer-klaus(mk)，Universal Code Standard(ucs)和
                parasoft软件公司自己基类的规范。
单元测试（白盒、动态）：对代码中的最小模块进行检查（自动生成桩函数、自动运行）
                覆盖率测试：以上覆盖率测试中的1,2,3,4,5,11。
功能测试（黑盒、动态）：避免手工执行每个测试用例。
回归测试：回归测试必要性：1）bug未改；2）bug修改结果不对；3）bug未改彻底；4）bug修改引进或者揭露更多bug
嵌入式测试。

软件测试原则：
ZERO-Bug是一种理想，Good-Enough是原则
Early-Best：越早测试，成本越低，付出的代价越小
Bug的80%原则：通过软件测试，检查出80%的bug

测试和调试：
1）测试是找出程序的错误；调试是改正已经找到的错误。
2）测试贯穿于软件开发的始终；调试可能只是在软件编码开发阶段。

判定表：
序号，条件，动作









































